// Generated by CoffeeScript 1.8.0
(function() {
  var buildVis, file, pop, preload, races, tally, timeAxis;

  file = '/data/dr.json';

  timeAxis = function() {
    var time, year, _i;
    time = {};
    for (year = _i = 1982; _i <= 2014; year = ++_i) {
      time[year] = 0;
    }
    return time;
  };

  races = function() {
    return ['White', 'Black', 'Hispanic', 'Other'];
  };

  preload = function() {
    var t, time, _i, _len, _ref;
    time = {};
    _ref = races();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      time[t] = timeAxis();
    }
    return time;
  };

  pop = function(data) {
    var k, struct, v, yr;
    struct = preload();
    for (k in data) {
      v = data[k];
      yr = /\d{4}$/.exec(v['date']);
      struct[v['race']][yr[0]]++;
    }
    return struct;
  };

  tally = function(arg) {
    var a, b, count, h, m, r, s, t, z, _i, _len, _ref;
    count = {};
    _ref = races();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      count[t] = [];
    }
    for (a in pop) {
      b = pop[a];
      for (r in b) {
        s = b[r];
        z = new Date(r);
        m = z.getTime() / 1000;
        h = {
          x: m,
          y: s
        };
        count[a].push(h);
      }
    }
    return count;
  };

  buildVis = function(count) {
    var controls, graph, hoverDetail, legend, palette, preview, shelving, smoother, ticksTreatment, xAxis, yAxis;
    palette = new Rickshaw.Color.Palette();
    graph = new Rickshaw.Graph({
      element: document.querySelector("#chart"),
      width: 700,
      height: 450,
      renderer: 'area',
      preserve: true,
      series: [
        {
          name: "White",
          color: palette.color(),
          data: count['White']
        }, {
          name: "Black",
          color: palette.color(),
          data: count['Black']
        }, {
          name: "Hispanic",
          color: palette.color(),
          data: count['Hispanic']
        }, {
          name: "Other",
          color: palette.color(),
          data: count['Other']
        }
      ]
    });
    graph.render();
    preview = new Rickshaw.Graph.RangeSlider({
      graph: graph,
      element: document.getElementById('preview')
    });
    hoverDetail = new Rickshaw.Graph.HoverDetail({
      graph: graph
    });
    legend = new Rickshaw.Graph.Legend({
      element: document.querySelector('#legend'),
      graph: graph
    });
    shelving = new Rickshaw.Graph.Behavior.Series.Toggle({
      graph: graph,
      legend: legend
    });
    smoother = new Rickshaw.Graph.Smoother({
      graph: graph,
      element: $('#smoother')
    });
    ticksTreatment = 'glow';
    xAxis = new Rickshaw.Graph.Axis.Time({
      graph: graph,
      ticksTreatment: ticksTreatment,
      timeFixture: new Rickshaw.Fixtures.Time.Local()
    });
    xAxis.render();
    yAxis = new Rickshaw.Graph.Axis.Y({
      graph: graph,
      orientation: 'left',
      tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
      element: document.getElementById('y_axis')
    });
    yAxis.render();
    return controls = new RenderControls({
      element: document.querySelector('form'),
      graph: graph
    });
  };

  $.getJSON(file, function(data) {
    var count;
    pop = pop(data);
    count = tally(pop);
    return buildVis(count);
  });

}).call(this);
